/**
 * iStreamPlanet Channels API
 * This API provides a way to list, create, and run channels.  Channels consist of inputs (ingest), transcoding settings like codecs and bitrates, and outputs (publishing).  List calls use cursor-based pagination with [RFC 5988](https://tools.ietf.org/html/rfc5988) Link headers. Clients *should* read this header and follow the next link to read all pages of results. 
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: support@istreamplanet.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorModel from '../model/ErrorModel';
import Source from '../model/Source';
import Summary from '../model/Summary';

/**
* Sources service.
* @module api/SourcesApi
* @version 0.0.0
*/
export default class SourcesApi {

    /**
    * Constructs a new SourcesApi. 
    * @alias module:api/SourcesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getSource operation.
     * @callback module:api/SourcesApi~getSourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Source} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Source
     * Get a source's configuration
     * @param {String} sourceId Unique source identifier
     * @param {module:api/SourcesApi~getSourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Source}
     */
    getSource(sourceId, callback) {
      let postBody = null;
      // verify the required parameter 'sourceId' is set
      if (sourceId === undefined || sourceId === null) {
        throw new Error("Missing the required parameter 'sourceId' when calling getSource");
      }

      let pathParams = {
        'source-id': sourceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['authcode', 'm2m'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = Source;
      return this.apiClient.callApi(
        '/v2/sources/{source-id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSources operation.
     * @callback module:api/SourcesApi~listSourcesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Summary>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Sources
     * Get a list of sources that are used to create channels.
     * @param {Object} opts Optional parameters
     * @param {String} opts.cursor Current page cursor
     * @param {Number} opts.pageSize Number of items to return (default to 100)
     * @param {module:api/SourcesApi~listSourcesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Summary>}
     */
    listSources(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'cursor': opts['cursor'],
        'page_size': opts['pageSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['authcode', 'm2m'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = [Summary];
      return this.apiClient.callApi(
        '/v2/sources', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
