/**
 * iStreamPlanet Channels API
 * This API provides a way to list, create, and run channels.  Channels consist of inputs (ingest), transcoding settings like codecs and bitrates, and outputs (publishing).  List calls use cursor-based pagination with [RFC 5988](https://tools.ietf.org/html/rfc5988) Link headers. Clients *should* read this header and follow the next link to read all pages of results. 
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: support@istreamplanet.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorModel from '../model/ErrorModel';
import GenericSignal from '../model/GenericSignal';
import InsertMetadataRequest from '../model/InsertMetadataRequest';
import InsertMetadataResult from '../model/InsertMetadataResult';
import ProgramSignal from '../model/ProgramSignal';
import Scte35 from '../model/Scte35';
import Segment from '../model/Segment';
import Slate from '../model/Slate';
import SpliceInsertEndSignal from '../model/SpliceInsertEndSignal';
import SpliceInsertStartSignal from '../model/SpliceInsertStartSignal';

/**
* ChannelOperations service.
* @module api/ChannelOperationsApi
* @version 0.0.0
*/
export default class ChannelOperationsApi {

    /**
    * Constructs a new ChannelOperationsApi. 
    * @alias module:api/ChannelOperationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the clearDvrWindow operation.
     * @callback module:api/ChannelOperationsApi~clearDvrWindowCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Clear DVR Window
     * Clears the DVR window for the channel by removing all video segments in the manifest from before the request.  This sets the earliest time a player can rewind to this point.
     * @param {String} channelId Unique channel identifier
     * @param {module:api/ChannelOperationsApi~clearDvrWindowCallback} callback The callback function, accepting three arguments: error, data, response
     */
    clearDvrWindow(channelId, callback) {
      let postBody = null;
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling clearDvrWindow");
      }

      let pathParams = {
        'channel-id': channelId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['authcode', 'm2m'];
      let contentTypes = [];
      let accepts = ['application/problem+json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/channels/{channel-id}/dvr-window', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSignals operation.
     * @callback module:api/ChannelOperationsApi~getSignalsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Segment>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Signals
     * Returns the active signals for a channel.
     * @param {String} channelId Unique channel identifier
     * @param {module:api/ChannelOperationsApi~getSignalsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Segment>}
     */
    getSignals(channelId, callback) {
      let postBody = null;
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling getSignals");
      }

      let pathParams = {
        'channel-id': channelId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['authcode', 'm2m'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = [Segment];
      return this.apiClient.callApi(
        '/v2/channels/{channel-id}/signal', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the insertId3 operation.
     * @callback module:api/ChannelOperationsApi~insertId3Callback
     * @param {String} error Error message, if any.
     * @param {module:model/InsertMetadataResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert ID3
     * Inserts the provided UTF-8 text metadata in the output stream embedded in a TXXX frame of a ID3 tag.
     * @param {String} channelId Unique channel identifier
     * @param {Object} opts Optional parameters
     * @param {String} opts.accept List of accepted Content-Type headers
     * @param {module:model/InsertMetadataRequest} opts.insertMetadataRequest 
     * @param {module:api/ChannelOperationsApi~insertId3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InsertMetadataResult}
     */
    insertId3(channelId, opts, callback) {
      opts = opts || {};
      let postBody = opts['insertMetadataRequest'];
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling insertId3");
      }

      let pathParams = {
        'channel-id': channelId
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': opts['accept']
      };
      let formParams = {
      };

      let authNames = ['authcode', 'm2m'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = InsertMetadataResult;
      return this.apiClient.callApi(
        '/v2/channels/{channel-id}/id3', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the insertScte35 operation.
     * @callback module:api/ChannelOperationsApi~insertScte35Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert SCTE-35
     * Inserts a SCTE-35 formatted binary payload into the channel.
     * @param {String} channelId Unique channel identifier
     * @param {Object} opts Optional parameters
     * @param {module:model/Scte35} opts.scte35 
     * @param {module:api/ChannelOperationsApi~insertScte35Callback} callback The callback function, accepting three arguments: error, data, response
     */
    insertScte35(channelId, opts, callback) {
      opts = opts || {};
      let postBody = opts['scte35'];
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling insertScte35");
      }

      let pathParams = {
        'channel-id': channelId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['authcode', 'm2m'];
      let contentTypes = ['application/json'];
      let accepts = ['application/problem+json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/channels/{channel-id}/scte35', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the previewImage operation.
     * @callback module:api/ChannelOperationsApi~previewImageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Preview Image
     * Get a static image of what your channel is outputting.  Valid Accept headers are: image/jpeg
     * @param {String} channelId Unique channel identifier
     * @param {Object} opts Optional parameters
     * @param {String} opts.accept List of accepted Content-Type headers
     * @param {module:api/ChannelOperationsApi~previewImageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    previewImage(channelId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling previewImage");
      }

      let pathParams = {
        'channel-id': channelId
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': opts['accept']
      };
      let formParams = {
      };

      let authNames = ['authcode', 'm2m'];
      let contentTypes = [];
      let accepts = ['application/problem+json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/channels/{channel-id}/preview-image', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the programEnd operation.
     * @callback module:api/ChannelOperationsApi~programEndCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Program End
     * Inserts a 'program end' SCTE-35 message into the channel.  This route should only be used for non-overlapping program markers.  If you want overlapping program makers please use Generic Signal instead.
     * @param {String} channelId Unique channel identifier
     * @param {Object} opts Optional parameters
     * @param {module:model/ProgramSignal} opts.programSignal 
     * @param {module:api/ChannelOperationsApi~programEndCallback} callback The callback function, accepting three arguments: error, data, response
     */
    programEnd(channelId, opts, callback) {
      opts = opts || {};
      let postBody = opts['programSignal'];
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling programEnd");
      }

      let pathParams = {
        'channel-id': channelId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['authcode', 'm2m'];
      let contentTypes = ['application/json'];
      let accepts = ['application/problem+json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/channels/{channel-id}/program-end', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the programStart operation.
     * @callback module:api/ChannelOperationsApi~programStartCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Program Start
     * Inserts a 'program start' SCTE-35 message into the channel.  This route should only be used for non-overlapping program markers.  If you want overlapping program makers please use Generic Signal instead.
     * @param {String} channelId Unique channel identifier
     * @param {Object} opts Optional parameters
     * @param {module:model/ProgramSignal} opts.programSignal 
     * @param {module:api/ChannelOperationsApi~programStartCallback} callback The callback function, accepting three arguments: error, data, response
     */
    programStart(channelId, opts, callback) {
      opts = opts || {};
      let postBody = opts['programSignal'];
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling programStart");
      }

      let pathParams = {
        'channel-id': channelId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['authcode', 'm2m'];
      let contentTypes = ['application/json'];
      let accepts = ['application/problem+json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/channels/{channel-id}/program-start', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the signal operation.
     * @callback module:api/ChannelOperationsApi~signalCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generic Signal
     * Inserts a SCTE-35 message into the channel.
     * @param {String} channelId Unique channel identifier
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/GenericSignal>} opts.genericSignal 
     * @param {module:api/ChannelOperationsApi~signalCallback} callback The callback function, accepting three arguments: error, data, response
     */
    signal(channelId, opts, callback) {
      opts = opts || {};
      let postBody = opts['genericSignal'];
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling signal");
      }

      let pathParams = {
        'channel-id': channelId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['authcode', 'm2m'];
      let contentTypes = ['application/json'];
      let accepts = ['application/problem+json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/channels/{channel-id}/signal', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the slateIn operation.
     * @callback module:api/ChannelOperationsApi~slateInCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Slate in
     * Replaces the current video source with a slate image or video.
     * @param {String} channelId Unique channel identifier
     * @param {Object} opts Optional parameters
     * @param {module:model/Slate} opts.slate 
     * @param {module:api/ChannelOperationsApi~slateInCallback} callback The callback function, accepting three arguments: error, data, response
     */
    slateIn(channelId, opts, callback) {
      opts = opts || {};
      let postBody = opts['slate'];
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling slateIn");
      }

      let pathParams = {
        'channel-id': channelId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['authcode', 'm2m'];
      let contentTypes = ['application/json'];
      let accepts = ['application/problem+json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/channels/{channel-id}/slate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the slateOut operation.
     * @callback module:api/ChannelOperationsApi~slateOutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Slate out
     * Removes any active slate and show the source video content.
     * @param {String} channelId Unique channel identifier
     * @param {module:api/ChannelOperationsApi~slateOutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    slateOut(channelId, callback) {
      let postBody = null;
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling slateOut");
      }

      let pathParams = {
        'channel-id': channelId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['authcode', 'm2m'];
      let contentTypes = [];
      let accepts = ['application/problem+json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/channels/{channel-id}/slate', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the spliceEnd operation.
     * @callback module:api/ChannelOperationsApi~spliceEndCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Splice Insert End
     * Inserts a 'splice insert end' SCTE-35 message into the channel.
     * @param {String} channelId Unique channel identifier
     * @param {Object} opts Optional parameters
     * @param {module:model/SpliceInsertEndSignal} opts.spliceInsertEndSignal 
     * @param {module:api/ChannelOperationsApi~spliceEndCallback} callback The callback function, accepting three arguments: error, data, response
     */
    spliceEnd(channelId, opts, callback) {
      opts = opts || {};
      let postBody = opts['spliceInsertEndSignal'];
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling spliceEnd");
      }

      let pathParams = {
        'channel-id': channelId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['authcode', 'm2m'];
      let contentTypes = ['application/json'];
      let accepts = ['application/problem+json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/channels/{channel-id}/splice-end', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the spliceStart operation.
     * @callback module:api/ChannelOperationsApi~spliceStartCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Splice Insert Start
     * Inserts a 'splice insert start' SCTE-35 message into the channel.
     * @param {String} channelId Unique channel identifier
     * @param {Object} opts Optional parameters
     * @param {module:model/SpliceInsertStartSignal} opts.spliceInsertStartSignal 
     * @param {module:api/ChannelOperationsApi~spliceStartCallback} callback The callback function, accepting three arguments: error, data, response
     */
    spliceStart(channelId, opts, callback) {
      opts = opts || {};
      let postBody = opts['spliceInsertStartSignal'];
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling spliceStart");
      }

      let pathParams = {
        'channel-id': channelId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['authcode', 'm2m'];
      let contentTypes = ['application/json'];
      let accepts = ['application/problem+json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/channels/{channel-id}/splice-start', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
