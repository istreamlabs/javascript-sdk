/**
 * iStreamPlanet Channels API
 * This API provides a way to list, create, and run channels.  Channels consist of inputs (ingest), transcoding settings like codecs and bitrates, and outputs (publishing).  List calls use cursor-based pagination with [RFC 5988](https://tools.ietf.org/html/rfc5988) Link headers. Clients *should* read this header and follow the next link to read all pages of results. 
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: support@istreamplanet.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ChannelIngestSourceAudioSources from './ChannelIngestSourceAudioSources';

/**
 * The ChannelIngestSource model module.
 * @module model/ChannelIngestSource
 * @version 0.0.0
 */
class ChannelIngestSource {
    /**
     * Constructs a new <code>ChannelIngestSource</code>.
     * Source provides a reference to the input media stream for this channel.
     * @alias module:model/ChannelIngestSource
     */
    constructor() { 
        
        ChannelIngestSource.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ChannelIngestSource</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ChannelIngestSource} obj Optional instance to populate.
     * @return {module:model/ChannelIngestSource} The populated <code>ChannelIngestSource</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ChannelIngestSource();

            if (data.hasOwnProperty('audio_sources')) {
                obj['audio_sources'] = ApiClient.convertToType(data['audio_sources'], [ChannelIngestSourceAudioSources]);
            }
            if (data.hasOwnProperty('captions_source')) {
                obj['captions_source'] = ApiClient.convertToType(data['captions_source'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('self')) {
                obj['self'] = ApiClient.convertToType(data['self'], 'String');
            }
        }
        return obj;
    }


}

/**
 * @member {Array.<module:model/ChannelIngestSourceAudioSources>} audio_sources
 */
ChannelIngestSource.prototype['audio_sources'] = undefined;

/**
 * Closed captions source embedding. If unspecified, defaults to ATSC_A53.
 * @member {module:model/ChannelIngestSource.CaptionsSourceEnum} captions_source
 */
ChannelIngestSource.prototype['captions_source'] = undefined;

/**
 * Unique identifier for this source.
 * @member {String} id
 */
ChannelIngestSource.prototype['id'] = undefined;

/**
 * Self link for the source.
 * @member {String} self
 */
ChannelIngestSource.prototype['self'] = undefined;





/**
 * Allowed values for the <code>captions_source</code> property.
 * @enum {String}
 * @readonly
 */
ChannelIngestSource['CaptionsSourceEnum'] = {

    /**
     * value: "ATSC_A53"
     * @const
     */
    "ATSC_A53": "ATSC_A53",

    /**
     * value: "SMPTE_2038"
     * @const
     */
    "SMPTE_2038": "SMPTE_2038"
};



export default ChannelIngestSource;

