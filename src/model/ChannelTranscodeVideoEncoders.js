/**
 * iStreamPlanet Channels API
 * This API provides a way to list, create, and run channels.  Channels consist of inputs (ingest), transcoding settings like codecs and bitrates, and outputs (publishing).  List calls use cursor-based pagination with [RFC 5988](https://tools.ietf.org/html/rfc5988) Link headers. Clients *should* read this header and follow the next link to read all pages of results. 
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: support@istreamplanet.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ChannelTranscodeH264 from './ChannelTranscodeH264';
import ChannelTranscodeH265 from './ChannelTranscodeH265';

/**
 * The ChannelTranscodeVideoEncoders model module.
 * @module model/ChannelTranscodeVideoEncoders
 * @version 0.0.0
 */
class ChannelTranscodeVideoEncoders {
    /**
     * Constructs a new <code>ChannelTranscodeVideoEncoders</code>.
     * @alias module:model/ChannelTranscodeVideoEncoders
     */
    constructor() { 
        
        ChannelTranscodeVideoEncoders.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ChannelTranscodeVideoEncoders</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ChannelTranscodeVideoEncoders} obj Optional instance to populate.
     * @return {module:model/ChannelTranscodeVideoEncoders} The populated <code>ChannelTranscodeVideoEncoders</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ChannelTranscodeVideoEncoders();

            if (data.hasOwnProperty('bit_rate')) {
                obj['bit_rate'] = ApiClient.convertToType(data['bit_rate'], 'Number');
            }
            if (data.hasOwnProperty('frame_rate')) {
                obj['frame_rate'] = ApiClient.convertToType(data['frame_rate'], 'String');
            }
            if (data.hasOwnProperty('h264')) {
                obj['h264'] = ChannelTranscodeH264.constructFromObject(data['h264']);
            }
            if (data.hasOwnProperty('h265')) {
                obj['h265'] = ChannelTranscodeH265.constructFromObject(data['h265']);
            }
            if (data.hasOwnProperty('height')) {
                obj['height'] = ApiClient.convertToType(data['height'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('width')) {
                obj['width'] = ApiClient.convertToType(data['width'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * Bit rate specifies the number in bits used per second. Higher values result in better video quality but bigger file sizes. For H.264 this value is the target of the constrained variable bit rate.
 * @member {Number} bit_rate
 */
ChannelTranscodeVideoEncoders.prototype['bit_rate'] = undefined;

/**
 * Frame rate specifies the number of images that are shown per second when playing back the video. For the best quality playback, this should match or be a multiple of the input source video stream.
 * @member {module:model/ChannelTranscodeVideoEncoders.FrameRateEnum} frame_rate
 */
ChannelTranscodeVideoEncoders.prototype['frame_rate'] = undefined;

/**
 * @member {module:model/ChannelTranscodeH264} h264
 */
ChannelTranscodeVideoEncoders.prototype['h264'] = undefined;

/**
 * @member {module:model/ChannelTranscodeH265} h265
 */
ChannelTranscodeVideoEncoders.prototype['h265'] = undefined;

/**
 * Height specifies the video height in pixels. Must be a multiple of two.
 * @member {Number} height
 */
ChannelTranscodeVideoEncoders.prototype['height'] = undefined;

/**
 * Encoder ID. IDs must be unique for all video and thumbnail encoders. This ID is referenced when setting up playlist publishing.
 * @member {String} id
 */
ChannelTranscodeVideoEncoders.prototype['id'] = undefined;

/**
 * Width specifies the video width in pixels. Must be a multiple of two.
 * @member {Number} width
 */
ChannelTranscodeVideoEncoders.prototype['width'] = undefined;





/**
 * Allowed values for the <code>frame_rate</code> property.
 * @enum {String}
 * @readonly
 */
ChannelTranscodeVideoEncoders['FrameRateEnum'] = {

    /**
     * value: "FR_23_98"
     * @const
     */
    "23_98": "FR_23_98",

    /**
     * value: "FR_24"
     * @const
     */
    "24": "FR_24",

    /**
     * value: "FR_25"
     * @const
     */
    "25": "FR_25",

    /**
     * value: "FR_29_97"
     * @const
     */
    "29_97": "FR_29_97",

    /**
     * value: "FR_30"
     * @const
     */
    "30": "FR_30",

    /**
     * value: "FR_50"
     * @const
     */
    "50": "FR_50",

    /**
     * value: "FR_59_94"
     * @const
     */
    "59_94": "FR_59_94",

    /**
     * value: "FR_60"
     * @const
     */
    "60": "FR_60"
};



export default ChannelTranscodeVideoEncoders;

