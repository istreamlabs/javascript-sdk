/**
 * iStreamPlanet Channels API
 * This API provides a way to list, create, and run channels.  Channels consist of inputs (ingest), transcoding settings like codecs and bitrates, and outputs (publishing).  List calls use cursor-based pagination with [RFC 5988](https://tools.ietf.org/html/rfc5988) Link headers. Clients *should* read this header and follow the next link to read all pages of results. 
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: support@istreamplanet.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ErrorModelErrors from './ErrorModelErrors';

/**
 * The ErrorModel model module.
 * @module model/ErrorModel
 * @version 0.0.0
 */
class ErrorModel {
    /**
     * Constructs a new <code>ErrorModel</code>.
     * @alias module:model/ErrorModel
     */
    constructor() { 
        
        ErrorModel.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ErrorModel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ErrorModel} obj Optional instance to populate.
     * @return {module:model/ErrorModel} The populated <code>ErrorModel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ErrorModel();

            if (data.hasOwnProperty('detail')) {
                obj['detail'] = ApiClient.convertToType(data['detail'], 'String');
            }
            if (data.hasOwnProperty('errors')) {
                obj['errors'] = ApiClient.convertToType(data['errors'], [ErrorModelErrors]);
            }
            if (data.hasOwnProperty('instance')) {
                obj['instance'] = ApiClient.convertToType(data['instance'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'Number');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }


}

/**
 * A human-readable explanation specific to this occurrence of the problem.
 * @member {String} detail
 */
ErrorModel.prototype['detail'] = undefined;

/**
 * Optional list of individual error details
 * @member {Array.<module:model/ErrorModelErrors>} errors
 */
ErrorModel.prototype['errors'] = undefined;

/**
 * A URI reference that identifies the specific occurence of the problem.
 * @member {String} instance
 */
ErrorModel.prototype['instance'] = undefined;

/**
 * HTTP status code
 * @member {Number} status
 */
ErrorModel.prototype['status'] = undefined;

/**
 * A short, human-readable summary of the problem type. This value should not change between occurances of the error.
 * @member {String} title
 */
ErrorModel.prototype['title'] = undefined;

/**
 * A URI reference to human-readable documentation for the error.
 * @member {String} type
 * @default 'about:blank'
 */
ErrorModel.prototype['type'] = 'about:blank';






export default ErrorModel;

