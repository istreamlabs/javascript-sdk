/**
 * iStreamPlanet Channels API
 * This API provides a way to list, create, and run channels.  Channels consist of inputs (ingest), transcoding settings like codecs and bitrates, and outputs (publishing).  List calls use cursor-based pagination with [RFC 5988](https://tools.ietf.org/html/rfc5988) Link headers. Clients *should* read this header and follow the next link to read all pages of results. 
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: support@istreamplanet.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ChannelTranscodeAudioEncoders from './ChannelTranscodeAudioEncoders';
import ChannelTranscodeSegmenter from './ChannelTranscodeSegmenter';
import ChannelTranscodeThumbnailEncoders from './ChannelTranscodeThumbnailEncoders';
import ChannelTranscodeVideoEncoders from './ChannelTranscodeVideoEncoders';

/**
 * The ChannelTranscode model module.
 * @module model/ChannelTranscode
 * @version 0.0.0
 */
class ChannelTranscode {
    /**
     * Constructs a new <code>ChannelTranscode</code>.
     * Transcode configures audio/video conversion settings.
     * @alias module:model/ChannelTranscode
     */
    constructor() { 
        
        ChannelTranscode.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ChannelTranscode</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ChannelTranscode} obj Optional instance to populate.
     * @return {module:model/ChannelTranscode} The populated <code>ChannelTranscode</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ChannelTranscode();

            if (data.hasOwnProperty('audio_encoders')) {
                obj['audio_encoders'] = ApiClient.convertToType(data['audio_encoders'], [ChannelTranscodeAudioEncoders]);
            }
            if (data.hasOwnProperty('feature_flags')) {
                obj['feature_flags'] = ApiClient.convertToType(data['feature_flags'], ['String']);
            }
            if (data.hasOwnProperty('id3_mode')) {
                obj['id3_mode'] = ApiClient.convertToType(data['id3_mode'], 'String');
            }
            if (data.hasOwnProperty('resize_mode')) {
                obj['resize_mode'] = ApiClient.convertToType(data['resize_mode'], 'String');
            }
            if (data.hasOwnProperty('segmenter')) {
                obj['segmenter'] = ChannelTranscodeSegmenter.constructFromObject(data['segmenter']);
            }
            if (data.hasOwnProperty('thumbnail_encoders')) {
                obj['thumbnail_encoders'] = ApiClient.convertToType(data['thumbnail_encoders'], [ChannelTranscodeThumbnailEncoders]);
            }
            if (data.hasOwnProperty('video_encoders')) {
                obj['video_encoders'] = ApiClient.convertToType(data['video_encoders'], [ChannelTranscodeVideoEncoders]);
            }
        }
        return obj;
    }


}

/**
 * Audio encoders specify audio conversion settings, e.g. channels, samples, codec, bitrate, etc.
 * @member {Array.<module:model/ChannelTranscodeAudioEncoders>} audio_encoders
 */
ChannelTranscode.prototype['audio_encoders'] = undefined;

/**
 * Feature flag strings enable experimental transcode features or functionality that are not yet or never will be promoted to the channeldoc model proper.
 * @member {Array.<String>} feature_flags
 */
ChannelTranscode.prototype['feature_flags'] = undefined;

/**
 * Specify how to process ID3 tags from the input source. If not specified, ID3 tags in the source will be ignored.
 * @member {module:model/ChannelTranscode.Id3ModeEnum} id3_mode
 */
ChannelTranscode.prototype['id3_mode'] = undefined;

/**
 * Resize mode specifies how to scale a video up or down to match the output dimensions.
 * @member {module:model/ChannelTranscode.ResizeModeEnum} resize_mode
 */
ChannelTranscode.prototype['resize_mode'] = undefined;

/**
 * @member {module:model/ChannelTranscodeSegmenter} segmenter
 */
ChannelTranscode.prototype['segmenter'] = undefined;

/**
 * Thumbnail encoders specify how to create image snapshots of the video stream.
 * @member {Array.<module:model/ChannelTranscodeThumbnailEncoders>} thumbnail_encoders
 */
ChannelTranscode.prototype['thumbnail_encoders'] = undefined;

/**
 * Video encoders specify video conversion settings, e.g. dimensions, codec, bitrate, etc.
 * @member {Array.<module:model/ChannelTranscodeVideoEncoders>} video_encoders
 */
ChannelTranscode.prototype['video_encoders'] = undefined;





/**
 * Allowed values for the <code>id3_mode</code> property.
 * @enum {String}
 * @readonly
 */
ChannelTranscode['Id3ModeEnum'] = {

    /**
     * value: "PASSTHROUGH"
     * @const
     */
    "PASSTHROUGH": "PASSTHROUGH"
};


/**
 * Allowed values for the <code>resize_mode</code> property.
 * @enum {String}
 * @readonly
 */
ChannelTranscode['ResizeModeEnum'] = {

    /**
     * value: "STRETCH"
     * @const
     */
    "STRETCH": "STRETCH",

    /**
     * value: "LETTERBOX"
     * @const
     */
    "LETTERBOX": "LETTERBOX"
};



export default ChannelTranscode;

