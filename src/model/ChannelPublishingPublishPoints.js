/**
 * iStreamPlanet Channels API
 * This API provides a way to list, create, and run channels.  Channels consist of inputs (ingest), transcoding settings like codecs and bitrates, and outputs (publishing).  List calls use cursor-based pagination with [RFC 5988](https://tools.ietf.org/html/rfc5988) Link headers. Clients *should* read this header and follow the next link to read all pages of results. 
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: support@istreamplanet.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ChannelPublishingHttp from './ChannelPublishingHttp';

/**
 * The ChannelPublishingPublishPoints model module.
 * @module model/ChannelPublishingPublishPoints
 * @version 0.0.0
 */
class ChannelPublishingPublishPoints {
    /**
     * Constructs a new <code>ChannelPublishingPublishPoints</code>.
     * @alias module:model/ChannelPublishingPublishPoints
     */
    constructor() { 
        
        ChannelPublishingPublishPoints.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ChannelPublishingPublishPoints</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ChannelPublishingPublishPoints} obj Optional instance to populate.
     * @return {module:model/ChannelPublishingPublishPoints} The populated <code>ChannelPublishingPublishPoints</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ChannelPublishingPublishPoints();

            if (data.hasOwnProperty('http')) {
                obj['http'] = ChannelPublishingHttp.constructFromObject(data['http']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('playlist_only_for')) {
                obj['playlist_only_for'] = ApiClient.convertToType(data['playlist_only_for'], 'String');
            }
        }
        return obj;
    }


}

/**
 * @member {module:model/ChannelPublishingHttp} http
 */
ChannelPublishingPublishPoints.prototype['http'] = undefined;

/**
 * uniquely identifies this publish_point within a channel configuration. Can be referenced by other publish_points in the 'playlist_only_for' field.
 * @member {String} id
 */
ChannelPublishingPublishPoints.prototype['id'] = undefined;

/**
 * playlist_only_for identifies the id of the publish_point that has the segments for this publish_point, which is only publishing a playlist for those segments. All publish_points within a publication must either have 'playlist_only_for' all set or all not set.
 * @member {String} playlist_only_for
 */
ChannelPublishingPublishPoints.prototype['playlist_only_for'] = undefined;






export default ChannelPublishingPublishPoints;

