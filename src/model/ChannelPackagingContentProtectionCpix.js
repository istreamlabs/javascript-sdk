/**
 * iStreamPlanet Channels API
 * This API provides a way to list, create, and run channels.  Channels consist of inputs (ingest), transcoding settings like codecs and bitrates, and outputs (publishing).  List calls use cursor-based pagination with [RFC 5988](https://tools.ietf.org/html/rfc5988) Link headers. Clients *should* read this header and follow the next link to read all pages of results. 
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: support@istreamplanet.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ChannelPackagingContentProtectionCpix model module.
 * @module model/ChannelPackagingContentProtectionCpix
 * @version 0.0.0
 */
class ChannelPackagingContentProtectionCpix {
    /**
     * Constructs a new <code>ChannelPackagingContentProtectionCpix</code>.
     * Only one of [&#39;simple&#39;, &#39;atlas&#39;, &#39;cpix&#39;] may be set.
     * @alias module:model/ChannelPackagingContentProtectionCpix
     */
    constructor() { 
        
        ChannelPackagingContentProtectionCpix.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ChannelPackagingContentProtectionCpix</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ChannelPackagingContentProtectionCpix} obj Optional instance to populate.
     * @return {module:model/ChannelPackagingContentProtectionCpix} The populated <code>ChannelPackagingContentProtectionCpix</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ChannelPackagingContentProtectionCpix();

            if (data.hasOwnProperty('certificates_id')) {
                obj['certificates_id'] = ApiClient.convertToType(data['certificates_id'], 'String');
            }
            if (data.hasOwnProperty('content_id')) {
                obj['content_id'] = ApiClient.convertToType(data['content_id'], 'String');
            }
            if (data.hasOwnProperty('credentials_id')) {
                obj['credentials_id'] = ApiClient.convertToType(data['credentials_id'], 'String');
            }
            if (data.hasOwnProperty('decryption_key_id')) {
                obj['decryption_key_id'] = ApiClient.convertToType(data['decryption_key_id'], 'String');
            }
            if (data.hasOwnProperty('drms')) {
                obj['drms'] = ApiClient.convertToType(data['drms'], ['String']);
            }
            if (data.hasOwnProperty('headers_id')) {
                obj['headers_id'] = ApiClient.convertToType(data['headers_id'], 'String');
            }
            if (data.hasOwnProperty('uri')) {
                obj['uri'] = ApiClient.convertToType(data['uri'], 'String');
            }
        }
        return obj;
    }


}

/**
 * Unique ID used for certificate settings, unique per distributor.
 * @member {String} certificates_id
 */
ChannelPackagingContentProtectionCpix.prototype['certificates_id'] = undefined;

/**
 * (Optional) Content ID that identifies this channel in the CPIX service. Value is defined by the DRM system owner, and if defined will be included as part of a POST request.
 * @member {String} content_id
 */
ChannelPackagingContentProtectionCpix.prototype['content_id'] = undefined;

/**
 * Unique ID used for credentials settings, unique per distributor.
 * @member {String} credentials_id
 */
ChannelPackagingContentProtectionCpix.prototype['credentials_id'] = undefined;

/**
 * Unique ID of the decryption key to use in case the server response contains content keys encrypted. The key is unique per distirutor, and configured ahead of time by the publishing team and the CPIX service owner.
 * @member {String} decryption_key_id
 */
ChannelPackagingContentProtectionCpix.prototype['decryption_key_id'] = undefined;

/**
 * (Optional) DRM system keys to request. If not defined a GET request will be done, and any key returned will be handled. If defined, random kid(s) (key ids) will be generated on rotation for each DRM system, and a POST request will be done to create them.
 * @member {Array.<module:model/ChannelPackagingContentProtectionCpix.DrmsEnum>} drms
 */
ChannelPackagingContentProtectionCpix.prototype['drms'] = undefined;

/**
 * (Optional) An identifier to a list of HTTP headers to be added to the request sent to the CPIX service.
 * @member {String} headers_id
 */
ChannelPackagingContentProtectionCpix.prototype['headers_id'] = undefined;

/**
 * CPIX service URI
 * @member {String} uri
 */
ChannelPackagingContentProtectionCpix.prototype['uri'] = undefined;





/**
 * Allowed values for the <code>drms</code> property.
 * @enum {String}
 * @readonly
 */
ChannelPackagingContentProtectionCpix['DrmsEnum'] = {

    /**
     * value: "WIDEVINE"
     * @const
     */
    "WIDEVINE": "WIDEVINE",

    /**
     * value: "FAIRPLAY"
     * @const
     */
    "FAIRPLAY": "FAIRPLAY",

    /**
     * value: "PRIMETIME"
     * @const
     */
    "PRIMETIME": "PRIMETIME",

    /**
     * value: "PLAYREADY"
     * @const
     */
    "PLAYREADY": "PLAYREADY"
};



export default ChannelPackagingContentProtectionCpix;

