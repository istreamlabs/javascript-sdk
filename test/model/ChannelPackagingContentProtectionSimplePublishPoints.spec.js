/**
 * iStreamPlanet Channels API
 * This API provides a way to list, create, and run channels.  Channels consist of inputs (ingest), transcoding settings like codecs and bitrates, and outputs (publishing).  List calls use cursor-based pagination with [RFC 5988](https://tools.ietf.org/html/rfc5988) Link headers. Clients *should* read this header and follow the next link to read all pages of results. 
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: support@istreamplanet.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Isp);
  }
}(this, function(expect, Isp) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Isp.ChannelPackagingContentProtectionSimplePublishPoints();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ChannelPackagingContentProtectionSimplePublishPoints', function() {
    it('should create an instance of ChannelPackagingContentProtectionSimplePublishPoints', function() {
      // uncomment below and update the code to test ChannelPackagingContentProtectionSimplePublishPoints
      //var instance = new Isp.ChannelPackagingContentProtectionSimplePublishPoints();
      //expect(instance).to.be.a(Isp.ChannelPackagingContentProtectionSimplePublishPoints);
    });

    it('should have the property basicAuth (base name: "basic_auth")', function() {
      // uncomment below and update the code to test the property basicAuth
      //var instance = new Isp.ChannelPackagingContentProtectionSimplePublishPoints();
      //expect(instance).to.be();
    });

    it('should have the property compression (base name: "compression")', function() {
      // uncomment below and update the code to test the property compression
      //var instance = new Isp.ChannelPackagingContentProtectionSimplePublishPoints();
      //expect(instance).to.be();
    });

    it('should have the property crossPlaybackPaths (base name: "cross_playback_paths")', function() {
      // uncomment below and update the code to test the property crossPlaybackPaths
      //var instance = new Isp.ChannelPackagingContentProtectionSimplePublishPoints();
      //expect(instance).to.be();
    });

    it('should have the property doNotMonitor (base name: "do_not_monitor")', function() {
      // uncomment below and update the code to test the property doNotMonitor
      //var instance = new Isp.ChannelPackagingContentProtectionSimplePublishPoints();
      //expect(instance).to.be();
    });

    it('should have the property headers (base name: "headers")', function() {
      // uncomment below and update the code to test the property headers
      //var instance = new Isp.ChannelPackagingContentProtectionSimplePublishPoints();
      //expect(instance).to.be();
    });

    it('should have the property method (base name: "method")', function() {
      // uncomment below and update the code to test the property method
      //var instance = new Isp.ChannelPackagingContentProtectionSimplePublishPoints();
      //expect(instance).to.be();
    });

    it('should have the property playbackBaseUrl (base name: "playback_base_url")', function() {
      // uncomment below and update the code to test the property playbackBaseUrl
      //var instance = new Isp.ChannelPackagingContentProtectionSimplePublishPoints();
      //expect(instance).to.be();
    });

    it('should have the property playbackQueryParams (base name: "playback_query_params")', function() {
      // uncomment below and update the code to test the property playbackQueryParams
      //var instance = new Isp.ChannelPackagingContentProtectionSimplePublishPoints();
      //expect(instance).to.be();
    });

    it('should have the property publishBaseUrl (base name: "publish_base_url")', function() {
      // uncomment below and update the code to test the property publishBaseUrl
      //var instance = new Isp.ChannelPackagingContentProtectionSimplePublishPoints();
      //expect(instance).to.be();
    });

  });

}));
