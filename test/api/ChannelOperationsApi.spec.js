/**
 * iStreamPlanet Channels API
 * This API provides a way to list, create, and run channels.  Channels consist of inputs (ingest), transcoding settings like codecs and bitrates, and outputs (publishing).  List calls use cursor-based pagination with [RFC 5988](https://tools.ietf.org/html/rfc5988) Link headers. Clients *should* read this header and follow the next link to read all pages of results. 
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: support@istreamplanet.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Isp);
  }
}(this, function(expect, Isp) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Isp.ChannelOperationsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ChannelOperationsApi', function() {
    describe('clearDvrWindow', function() {
      it('should call clearDvrWindow successfully', function(done) {
        //uncomment below and update the code to test clearDvrWindow
        //instance.clearDvrWindow(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSignals', function() {
      it('should call getSignals successfully', function(done) {
        //uncomment below and update the code to test getSignals
        //instance.getSignals(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('insertId3', function() {
      it('should call insertId3 successfully', function(done) {
        //uncomment below and update the code to test insertId3
        //instance.insertId3(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('insertScte35', function() {
      it('should call insertScte35 successfully', function(done) {
        //uncomment below and update the code to test insertScte35
        //instance.insertScte35(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('previewImage', function() {
      it('should call previewImage successfully', function(done) {
        //uncomment below and update the code to test previewImage
        //instance.previewImage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('programEnd', function() {
      it('should call programEnd successfully', function(done) {
        //uncomment below and update the code to test programEnd
        //instance.programEnd(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('programStart', function() {
      it('should call programStart successfully', function(done) {
        //uncomment below and update the code to test programStart
        //instance.programStart(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('signal', function() {
      it('should call signal successfully', function(done) {
        //uncomment below and update the code to test signal
        //instance.signal(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('slateIn', function() {
      it('should call slateIn successfully', function(done) {
        //uncomment below and update the code to test slateIn
        //instance.slateIn(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('slateOut', function() {
      it('should call slateOut successfully', function(done) {
        //uncomment below and update the code to test slateOut
        //instance.slateOut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('spliceEnd', function() {
      it('should call spliceEnd successfully', function(done) {
        //uncomment below and update the code to test spliceEnd
        //instance.spliceEnd(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('spliceStart', function() {
      it('should call spliceStart successfully', function(done) {
        //uncomment below and update the code to test spliceStart
        //instance.spliceStart(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
